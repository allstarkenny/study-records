# 디자인 패턴과 프로그래밍 패러다임
## 1.1 디자인 패턴
관심있게 본 것
- 참고 사이트 : https://refactoring.guru/ko
- 디자인 패턴
    - 설계 시 발생했던 문제점들을 객체 간의 상호 관계 등을 이용하여 해결할 수 있는 하나의 규약 형태로 만들어둔 것
    - 오랜 개발자들의 삽질이 들어있는 노하우들의 집합
- 크게 생성 패턴, 행동 패턴, 구조 패턴으로 구분
- 생성 패턴
    - 코드의 유연성과 재사용을 증가 시키는 객체를 만드는 방법
    - 싱글톤 패턴
        - 하나의 클래스에 오직 하나의 인스턴스만 가지는 패턴
        - 주로 DB 커넥션 관리에서 많이 사용
        - 생성자 비공개 and 생성 메소드를 현재 생성된 인스턴스를 넘기도록 수정
        - 장점
            - 인스턴스 갯수 제한을 할 수 있다.
        - 단점
            - 단위 테스트가 힘들다
            - 모듈간의 연결이 강하게 생긴다.
        - DI (의존성 주입을 사용하여 연결 고리를 끊어낸다)
            - 햄버거 래시피 변경
    - 팩토리 패턴
        - 여러 객체의 생성을 제어하는 하나의 커다란 공장이 있는 구조
        - 인스턴스 생성에 대한 로직이 분리되므로 더 좋은 결합이 느슨해진다
        - 장점
            - 생성하는 녀석과 레시피가 단단하게 결합되지 않는다
        - 단점
            - 짜야하는 코드가 많다 (자식이 많아짐)
- 행동 패턴
    - 객체 간의 책임 할당
    - 전략 패턴
        - 객체의 행위를 바꾸고 싶을때 직접 수정이 아니라 알고리즘을 추가하여 변경
        - 결국 DI 이야기
        - 장점
            - 런타임에 객체 내부 알고리즘을 사용할 수 있음
        - 단점
            - 지나치게 복잡할 수 있음
            - 각 전략에 대해 개발자가 잘 알고 있어야함
            - 간단한 전략일 경우 함수형 코드로 추가하는게 더 좋을 수 있음
    - 옵저버 패턴
        - 객체들의 상태에 따라 주고받는 메소드를 기반으로 변경이 발생
        - MVC 모델이 옵저버 패턴
        - 상속, 구현 차이
    - 이터레이터 패턴
        - iterator 를 써서 반복하는 기능 추가
        - 결국 요것도 공통화
- 구조 패턴
    - 구조를 유연하고 효율적으로 유지하는 방법
    - 프록시 패턴과 프록시 서버
        - 코드가 없네?
        - 프록시는 서버 앞단에서 뒤의 서버들을 추상화 시키는 녀석
            - 보안, 데이터 검증, 캐싱, 로깅을 함
            - 워드 프록시 : 서버 → 클라
            - 리버스 프록시 : 클라 → 서버
        - 그러면 LB랑 무슨 차이일까?
            - LB가 프록시 서버의 종류
            - 트래픽 분산
        - CDN
        - DDOS
        - HTTPS
        - CORS
            - 요거 이해가 잘 안되어서 다시 정리
            - 예전에는 프론트/백엔드 나눠져있지 않았음
            - 그래서 중간에 사용자 연결을 훔쳐서 호출하는 경우를 기 위해서 origin이라는 항목을 넣어둠
            - 그런데 최근에 프론트, 백엔드 나눠지다보니 CORS 문제가 발생함
            - 그래서 이걸 해결하기 위해서 프론트에서는 포워드 프록시 형태로 설정
- 그 외에 패턴들
    - 노출모듈 패턴
        - 접근 제어자를 만드는 패턴?
        - 한번도 써본적이 없..
    - MVC 패턴
        - 모델 : 상수, 변수, 데이터
        - 뷰 : 화면 출력, 사용자 인터페이스
        - 컨트롤러: 메인 로직
        - 단점
            - 뷰와 모델의 의존성이 크다
            - 뷰에서 모델을 직접 바라봄
        - 리엑트 이야기가 잠깐 나오는데 엄청 좋음
    - MVP 패턴
        - 여기서는 프레젠터 이야기는 왜 안하는거지?
        - 프레젠터와 컨트롤러 차이
        - 프레젠터는 뷰와 모델의 연결고리역할을 함
        - 뷰에서 모델을 직접 바라보지 않고 프리젠터를 바라봄
    - MVVM 패턴
        - 단위 테스트 하기 쉽다?
        - 주로 Vue.js에서 쓴다
    - 그러면 백엔드는 뭘 쓰냐?
        - 주로 MVC를 사용. (Spring 쓰니까…)
        - 대부분 뷰가 없기 때문에
        
소감
- 다 요약 되어있다보니 따로 찾아봐야 할 내용이 많아서 시간이 생각보다 오래 걸렸던 것 같습니다.
- 약간 저자의 의식의 흐름대로 진행되는게 있어서 헷갈리는 부분이 있었던 것 같습니다.
- 단어만 잘 기억해두는 방향으로 진행하면 좋을거 같습니다.

## 1.2 프로그래밍 패러다임
관심있게 본 것
- 프로그래밍 패러다임
    - 패러다임은 어떤 한 시대 사람들의 견해나 사고를 근본적으로 규정하고 있는 테두리로서의 인식의 체계, 또는 사물에 대한 이론적인 틀이나 체계를 의미하는 개념이다 ([위키 페이지](https://ko.wikipedia.org/wiki/%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84))
    - 프로그래밍 패러다임이라고 하면 프로그램을 개발하는데 필요한 틀이 어떤 내용이 중심인가를 나타내는 내용
    - 사실 프로그래밍 패러다임은 엄청 많다 ([위키 페이지](https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D_%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84))
    - 선언형 프로그래밍
        - 흠.. 첫 줄이 잘 이해가 되지 않는다. (프로그램은 함수로 이루어진 것이다. 라는 명제가 담겨있는 패러다임? 이건 함수형 프로그래밍이라는건가?)
        - 때마침 현재 다른 스터디에서 읽고 있는 책에서 선언형과 명령형을 비교하면서 css(선언형)과 js(명령형)의 예시를 들었던 기억이 났다. ([데이터 중심 어플리케이션 책 강추!](http://www.yes24.com/Product/Goods/59566585))
        - css로 특정 항목의 텍스트 배경을 파란색으로 만들고 싶다면 다음과 같은 코드를 쓸 수 있다.
        ```css
            li.selected > p {
                background-color: blue;
            }
        ```
        - 같은 항목을 js로 만든다면 다음과 같은 내용들이 필요하다.

        ```javascript
            var liElements = document.getElementsByTagName("li");
            for(var i = 0; i < liElements.length; i++){
                if(liElements[i].className === "selected") {
                    var children = liElements[i].childNodes;
                    for(var j = 0; j < children.length; j++) {
                        var child = children[i];
                        if (child.nodeType === Node.ELEMENT_NODE && child.tagName === "p") {
                            child.setAttribute("style", "background-color:blue"
                        }
                    }
                }
            }
        ```
        - 당연히 읽기는 선언형이 훨씬 좋지만 아무래도 여러가지 상황을 다양하게 처리하기 위해서는 명령형 프로그래밍이 필요하다.
        - 사실 선언형도 내부 동작을 까보면 명령형으로 동작한다.
    - 함수형 프로그래밍
        - 이 책에서는 주요 텍스트만 가져가는것이 맞는거 같다.
        - 순수함수
            - 전역변수를 사용하지 않는 메소드
        - 고차함수
            - 함수를 인자로 받을 수 있는 메소드
        - 일급 객체
            - 변수 할당 가능
            - 함수 안에 함수를 매개변수로 담을 수 있음
            - 함수가 함수를 받을 수 있음
        - 불변 객체
            - 순수함수때문에 나온 이야기
            - 항상 같은 값이 나와야 하는 내용이기 때문에 한번 객체에 할당된 값을 변경하지 못하게 하는 객체
            - 객체에 대한 신뢰성이 생긴다.
            - 메모리 누수가 많이 발생할 수 있다.
        - 나중에 기회가 된다면 함수형의 대표주자인 Clojure를 배워보고 싶어요.
    - 객체 지향 프로그래밍(OOP)
        - 너무 다들 잘 아실 것 같으니.. 아래 내용만 잘 정리해도 도움 될거 같음
        - 특징
            - 추상화
            - 캡슐화
            - 상속성
            - 다형성
                - 오버로딩
                - 오버라이딩
        - 설계 원칙 (SOLID)
            - 단일 책임 원칙 (SRP)
            - 개방 폐쇄 원칙 (OCP)
            - 리스코프 치환 원칙(LSP)
            - 인터페이스 분리 원칙 (ISP)
            - 의존 역전 원칙 (DIP)
    - 절차형 프로그래밍?(절차 지향 프로그래밍)
        - 절차지향이 속도가 빠르다는 이야기를 하기 위해서는 GC에 대한 이야기가 좀 나와야 할 것 같은데 안나와서 아쉽..
        - 절차지향은 컴퓨터 언어 체계와 비슷해서 좀 더 빠름.. 다만 버그도 더 크게 날 수 있음.
        - GC 이야기로 예를 들면 메모리 할당 후 메모리 해제도 다 코드에서 해줘야 함. 이거 안해주면 간단한 프로그램도 OOM 나서 죽음
    - 사실 프로그래밍은 유행이라는게 있는거고 그 유행이 지금은 함수형으로 흐르고 있는것 같음
    - 결론으로 나온 것 처럼 어떤 내용이든 완벽한것은 없으니 계속 공부 해야겠다..
    
소감
- 책 내용은 짧은데 따로 공부해야 할 부분이 많았네요 ㅠ
- 옛날 옛적 처음 코딩할때는 절차지향 객체지향만 잘 알고 있으면 되었는데 (대학교 강의 첫날 설치해야 하는 자바 최신 버전이 6..) 함수형 등등 다양한 패러다임이 나오는게 처음에는 신기했어요. 나중에는 또 공부해야 할게 늘었다는 사실에 약간 좌절 ..
- 앞으로 계속 함께 공부해나가요..
