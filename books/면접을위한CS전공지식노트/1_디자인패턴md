# 디자인 패턴
관심있게 본 것
- 참고 사이트 : https://refactoring.guru/ko
- 디자인 패턴
    - 설계 시 발생했던 문제점들을 객체 간의 상호 관계 등을 이용하여 해결할 수 있는 하나의 규약 형태로 만들어둔 것
    - 오랜 개발자들의 삽질이 들어있는 노하우들의 집합
- 크게 생성 패턴, 행동 패턴, 구조 패턴으로 구분
- 생성 패턴
    - 코드의 유연성과 재사용을 증가 시키는 객체를 만드는 방법
    - 싱글톤 패턴
        - 하나의 클래스에 오직 하나의 인스턴스만 가지는 패턴
        - 주로 DB 커넥션 관리에서 많이 사용
        - 생성자 비공개 and 생성 메소드를 현재 생성된 인스턴스를 넘기도록 수정
        - 장점
            - 인스턴스 갯수 제한을 할 수 있다.
        - 단점
            - 단위 테스트가 힘들다
            - 모듈간의 연결이 강하게 생긴다.
        - DI (의존성 주입을 사용하여 연결 고리를 끊어낸다)
            - 햄버거 래시피 변경
    - 팩토리 패턴
        - 여러 객체의 생성을 제어하는 하나의 커다란 공장이 있는 구조
        - 인스턴스 생성에 대한 로직이 분리되므로 더 좋은 결합이 느슨해진다
        - 장점
            - 생성하는 녀석과 레시피가 단단하게 결합되지 않는다
        - 단점
            - 짜야하는 코드가 많다 (자식이 많아짐)
- 행동 패턴
    - 객체 간의 책임 할당
    - 전략 패턴
        - 객체의 행위를 바꾸고 싶을때 직접 수정이 아니라 알고리즘을 추가하여 변경
        - 결국 DI 이야기
        - 장점
            - 런타임에 객체 내부 알고리즘을 사용할 수 있음
        - 단점
            - 지나치게 복잡할 수 있음
            - 각 전략에 대해 개발자가 잘 알고 있어야함
            - 간단한 전략일 경우 함수형 코드로 추가하는게 더 좋을 수 있음
    - 옵저버 패턴
        - 객체들의 상태에 따라 주고받는 메소드를 기반으로 변경이 발생
        - MVC 모델이 옵저버 패턴
        - 상속, 구현 차이
    - 이터레이터 패턴
        - iterator 를 써서 반복하는 기능 추가
        - 결국 요것도 공통화
- 구조 패턴
    - 구조를 유연하고 효율적으로 유지하는 방법
    - 프록시 패턴과 프록시 서버
        - 코드가 없네?
        - 프록시는 서버 앞단에서 뒤의 서버들을 추상화 시키는 녀석
            - 보안, 데이터 검증, 캐싱, 로깅을 함
            - 워드 프록시 : 서버 → 클라
            - 리버스 프록시 : 클라 → 서버
        - 그러면 LB랑 무슨 차이일까?
            - LB가 프록시 서버의 종류
            - 트래픽 분산
        - CDN
        - DDOS
        - HTTPS
        - CORS
            - 요거 이해가 잘 안되어서 다시 정리
            - 예전에는 프론트/백엔드 나눠져있지 않았음
            - 그래서 중간에 사용자 연결을 훔쳐서 호출하는 경우를 기 위해서 origin이라는 항목을 넣어둠
            - 그런데 최근에 프론트, 백엔드 나눠지다보니 CORS 문제가 발생함
            - 그래서 이걸 해결하기 위해서 프론트에서는 포워드 프록시 형태로 설정
- 그 외에 패턴들
    - 노출모듈 패턴
        - 접근 제어자를 만드는 패턴?
        - 한번도 써본적이 없..
    - MVC 패턴
        - 모델 : 상수, 변수, 데이터
        - 뷰 : 화면 출력, 사용자 인터페이스
        - 컨트롤러: 메인 로직
        - 단점
            - 뷰와 모델의 의존성이 크다
            - 뷰에서 모델을 직접 바라봄
        - 리엑트 이야기가 잠깐 나오는데 엄청 좋음
    - MVP 패턴
        - 여기서는 프레젠터 이야기는 왜 안하는거지?
        - 프레젠터와 컨트롤러 차이
        - 프레젠터는 뷰와 모델의 연결고리역할을 함
        - 뷰에서 모델을 직접 바라보지 않고 프리젠터를 바라봄
    - MVVM 패턴
        - 단위 테스트 하기 쉽다?
        - 주로 Vue.js에서 쓴다
    - 그러면 백엔드는 뭘 쓰냐?
        - 주로 MVC를 사용. (Spring 쓰니까…)
        - 대부분 뷰가 없기 때문에
소감
- 다 요약 되어있다보니 따로 찾아봐야 할 내용이 많아서 시간이 생각보다 오래 걸렸던 것 같습니다.
- 약간 저자의 의식의 흐름대로 진행되는게 있어서 헷갈리는 부분이 있었던 것 같습니다.
- 단어만 잘 기억해두는 방향으로 진행하면 좋을거 같습니다.
